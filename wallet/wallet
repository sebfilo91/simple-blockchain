package wallet

import (
	"github.com/tyler-smith/go-bip39"
	"github.com/tyler-smith/go-bip32"
	"crypto/ecdsa"
	"crypto/elliptic"
	"fmt"
	"crypto/rand"
)

type Wallet struct {

}

func (w Wallet) SignTx() {

}

func (w Wallet) CreateWallet() {

	// Generate a mnemonic for memorization or user-friendly seeds
	entropy, _ := bip39.NewEntropy(256)
	mnemonic, _ := bip39.NewMnemonic(entropy)

	// Generate a Bip32 HD wallet for the mnemonic and a user supplied password
	seed := bip39.NewSeed(mnemonic, "Secret Passphrase")

	masterKey, _ := bip32.NewMasterKey(seed)

	publicKey := masterKey.PublicKey()

	privKeyEcdsa, _ := ecdsa.GenerateKey(elliptic.P521(), rand.Reader)

	msg := []byte("bonjour")

	r, s, _ := ecdsa.Sign(rand.Reader, privKeyEcdsa, msg)

	verify := ecdsa.Verify(&privKeyEcdsa.PublicKey, msg, r, s)

	fmt.Println("verify : " ,verify)
	// Display mnemonic and keys
	fmt.Println("Mnemonic: ", mnemonic)
	fmt.Println("Master private key: ", masterKey)
	fmt.Println("Master public key: ", publicKey)
}